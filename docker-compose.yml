version: '3'

services:
  frontend:
    image: capstone910/healthcare-workflow:webapp-v1.7.0
    container_name: frontend-service
    ports:
      - "3000:3000"  # Maps host port 3000 to container port 3000
    networks:
      - app-network
    depends_on:
      - backend
      - postgres
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=http://3.106.13.250  # Use HTTP
      - NEXT_PUBLIC_WEBSOCKET_URL=ws://3.106.13.250  # Use WS for secure WebSocket
    command: "sh -c 'sleep 10 && npm run build && npm start'"

  backend:
    image: capstone910/healthcare-workflow:api-v1.11.0
    container_name: backend-service
    ports:
      - "8080:8080"  # Maps host port 8080 to container port 8080
    networks:
      - app-network
    depends_on:
      - postgres
    environment:
      - USER_URL=http://3.106.13.250/consultshistory  # Use HTTPS
      - DB_URL=jdbc:postgresql://postgres:5432/postgres
      - ADMIN_URL=http://3.106.13.250/admin  # Use HTTPS
      - LOGIN_URL=http://3.106.13.250/login  # Use HTTPS
      - FRONTEND_CORS_ORIGIN=http://3.106.13.250  # Use HTTPS

  postgres:
    image: postgres:latest
    container_name: postgres-service
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres         # Matches your application.properties file
      POSTGRES_PASSWORD: Postgresql   # Matches your application.properties file
    ports:
      - "5432:5432"  # Maps host port 5432 to container port 5432
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistent volume for PostgreSQL data

  caddy:
    image: caddy:latest
    container_name: caddy-service
    ports:
      - "80:80"
    networks:
      - app-network
    volumes:
      - /home/ec2-user/Caddyfile:/etc/caddy/Caddyfile  # Correct path to Caddyfile with casing
      - caddy_data:/data

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  caddy_data:
    driver: local
