## Comments are provided throughout this file to help you get started.
## If you need more help, visit the Docker Compose reference guide at
## https://docs.docker.com/go/compose-spec-reference/
#
## Here the instructions define your application as a service called "server".
## This service is built from the olddock in the current directory.
## You can add other services your application may depend on here, such as a
## database or a cache. For examples, see the Awesome Compose repository:
## https://github.com/docker/awesome-compose
#version: '3.8'
#
#services:
#  app:
#    build: .
#    ports:
#      - "8081:8080"
#    image: "convert-audio"
#    env_file:
#      - .env
#    environment:
#      - SPRING_PROFILES_ACTIVE=default
#      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
#      - OPENAI_API_KEY=${OPENAI_API_KEY}
#
## The commented out section below is an example of how to define a PostgreSQL
## database that your application can use. `depends_on` tells Docker Compose to
## start the database before your application. The `db-data` volume persists the
## database data between container restarts. The `db-password` secret is used
## to set the database password. You must create `db/password.txt` and add
## a password of your choosing to it before running `docker-compose up`.
##     depends_on:
##       db:
##         condition: service_healthy
##   db:
##     image: postgres
##     restart: always
##     user: postgres
##     secrets:
##       - db-password
##     volumes:
##       - db-data:/var/lib/postgresql/data
##     environment:
##       - POSTGRES_DB=example
##       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
##     expose:
##       - 5432
##     healthcheck:
##       test: [ "CMD", "pg_isready" ]
##       interval: 10s
##       timeout: 5s
##       retries: 5
## volumes:
##   db-data:
## secrets:
##   db-password:
##     file: db/password.txt
#============================================================
version: '3'

services:
  frontend:
    image: capstone910/healthcare-workflow:webapp-v1.7.0  # Private repo for frontend
    container_name: frontend-service
    ports:
      - "3000:3000"  # Maps host port 3000 to container port 3000
    networks:
      - app-network
    depends_on:
      - backend
      - postgres
    environment:
      - NEXT_PUBLIC_BACKEND_URL=http://backend:8080
      - NEXT_PUBLIC_WEBSOCKET_URL=ws://backend:8080

  backend:
    image: capstone910/healthcare-workflow:api-v1.11.0  # Private repo for backend
    container_name: backend-service
    ports:
      - "8080:8080"  # Maps host port 8080 to container port 8080
    networks:
      - app-network
    depends_on:
      - postgres
    environment:
           - DB_URL=jdbc:postgresql://postgres:5432/postgres
           - ADMIN_URL:http://frontend:3000/app/admin
           - USER_URL:http://frontend:3000/app/consultshistory
           - LOGIN_URL:http://backend:8080/login
           - FRONTEND_CORS_ORIGIN=http://localhost:3000

  postgres:
    image: postgres:latest  # Public repo for PostgreSQL
    container_name: postgres-service
    environment:
      POSTGRES_DB: postgres               # You can change this if needed
      POSTGRES_USER: postgres         # Matches your application.properties file
      POSTGRES_PASSWORD: Postgresql   # Matches your application.properties file
    ports:
      - "5432:5432"  # Maps host port 5432 to container port 5432
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistent volume for PostgreSQL data

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local

